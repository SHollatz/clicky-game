{"version":3,"sources":["Components/Wrapper.jsx","Components/Header.jsx","Components/Image.jsx","Components/Footer.jsx","Components/Jumbotron.jsx","App.jsx","serviceWorker.jsx","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Header","message","score","topscore","Image","id","name","alt","src","image","onClick","Footer","Jumbotron","App","state","goats","clickedElements","handleClick","event","target","_this","setState","length","includes","resetGame","push","shuffleGoats","i","j","Math","floor","random","tempi","tempj","shuffledGoats","_this2","this","Components_Header","Components_Jumbotron","Components_Wrapper","map","goat","Components_Image","key","Components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b9c9e29.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nconst Header = (props) => (\r\n  <div className=\"Header\">\r\n    <nav className=\"navbar\">\r\n        <span className=\"navbar-item\">Clicky Game</span>\r\n        <span className=\"navbar-item\">{props.message}</span>\r\n        <span className=\"navbar-item\">\r\n          Score: {props.score} | Topscore: {props.topscore}\r\n        </span>\r\n    </nav>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Image = props => {\r\n  // console.log(props);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img id={props.id} name={props.alt} alt={props.alt} src={props.image} onClick={props.onClick} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;","import React from \"react\";\r\n// import logo from './logo.svg';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <span className=\"footer-text\">Clicky Game!</span>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nconst Jumbotron = () => (\r\n  <div className=\"jumbotron text-center\">\r\n    <h3>Clicky Game!</h3>\r\n    <h6>Click on an image to earn points, but don't click on any more than once!</h6>\r\n  </div>\r\n);\r\n\r\nexport default Jumbotron;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./Components/Wrapper\";\nimport Header from \"./Components/Header\";\nimport Image from \"./Components/Image\";\nimport Footer from \"./Components/Footer\";\nimport goats from \"./goats.json\";\nimport Jumbotron from \"./Components/Jumbotron\";\n\nclass App extends Component {\n\n  state = {\n      goats: goats,\n      message: \"\",\n      score: 0, \n      topscore: 0\n  }\n\n  clickedElements = [];\n  handleClick = event => {\n    const {id} = event.target;\n    let topscore = this.state.score;\n    this.setState({message: \"\"});\n    if (this.clickedElements.length === 12) {\n      this.clickedElements = [];\n    }\n    if (this.clickedElements.includes(id)) {\n      this.resetGame();\n    } else {\n      this.clickedElements.push(id);\n      this.setState({score: this.state.score + 1});\n      if (this.state.topscore <= this.state.score) {\n        topscore += 1;\n        this.setState({topscore: topscore});\n        this.setState({message: \"You cracked the Topscore!\"})\n        if (topscore === 12) {\n          this.setState({message: \"You are amazing! You clicked all 12 goats without mistake! Keep going!!\"})\n          this.shuffleGoats();\n        }\n      }\n      this.shuffleGoats();\n    }\n  }\n\n  resetGame = () => {\n    this.setState({message: \"Oh no, you had that one already! Try again\"});\n    this.setState({score: 0});\n    this.shuffleGoats();\n    this.clickedElements = [];\n  }\n\n  shuffleGoats = () => {\n    const {goats} = this.state;\n    let i = goats.length;\n    if (i === 0) {\n      return false;\n    };\n    while (--i) {\n      let j = Math.floor(Math.random() * (i+1));\n      let tempi=goats[i];\n      var tempj = goats[j];\n      goats[i] = tempj;\n      goats[j] = tempi;\n    }\n    let shuffledGoats = goats;\n    this.setState({goats: shuffledGoats});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        message={this.state.message}\n        score={this.state.score}\n        topscore={this.state.topscore}\n        />\n        <Jumbotron />\n        <Wrapper >\n          {this.state.goats.map(goat => (\n            <Image\n              id={goat.id}\n              name={goat.alt}\n              image={goat.image}\n              alt={goat.alt}\n              onClick={this.handleClick}\n              key={goat.id}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}